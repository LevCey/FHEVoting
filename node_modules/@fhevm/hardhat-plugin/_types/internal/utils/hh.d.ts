import { HardhatRuntimeEnvironment } from "hardhat/types";
import { FHEVMConfig, FhevmProvider } from "../../types";
export declare function computeDummyAddress(): string;
export declare function getFHEVMConfig(hre: HardhatRuntimeEnvironment, contractAddress: string): Promise<FHEVMConfig>;
export declare function getDecryptionOracleAddress(hre: HardhatRuntimeEnvironment, contractAddress: string): Promise<string>;
/**
 * @param hre
 * @returns The chainId of the network we are connected to. Returns undefined if there is no connection.
 *          Throws an error otherwise.
 */
export declare function connectedChainId(hre: HardhatRuntimeEnvironment): Promise<number | undefined>;
export declare function resolveNetworkConfigChainId(hre: HardhatRuntimeEnvironment, useEthChainId: boolean): Promise<number>;
export declare function getWeb3ClientVersion(provider: FhevmProvider): Promise<any>;
export declare function isHardhatNode(networkName: string, chainId: number | undefined, provider: FhevmProvider): Promise<boolean>;
export declare function checkSupportedNetwork(hre: HardhatRuntimeEnvironment): Promise<true | undefined>;
//# sourceMappingURL=hh.d.ts.map