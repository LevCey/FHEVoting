import { ethers as EthersT } from "ethers";
import { HardhatRuntimeEnvironment } from "hardhat/types";
export declare enum FhevmEthersProviderType {
    Unknown = 0,
    Hardhat = 1,
    HardhatNode = 2,
    Anvil = 3
}
export type FhevmEthersProviderMethods = {
    setCode?: string;
    impersonateAccount?: string;
    setBalance?: string;
};
export type FhevmEthersProviderInfo = {
    web3ClientVersion: string;
    chainId: number;
    url?: string;
    networkName: string;
    type: FhevmEthersProviderType;
    methods: FhevmEthersProviderMethods;
};
export declare class FhevmEthersProvider {
    #private;
    private constructor();
    static create(hre: HardhatRuntimeEnvironment): Promise<FhevmEthersProvider>;
    get provider(): EthersT.Provider & {
        send(method: string, params?: any[]): Promise<any>;
    };
    get info(): FhevmEthersProviderInfo;
    get isMock(): boolean;
    get isHardhatWeb3Client(): boolean;
    get chainId(): number;
    send(method: string, params?: any[]): Promise<any>;
    impersonateAddressAndSetBalance(hre: HardhatRuntimeEnvironment, address: string, balance: bigint): Promise<EthersT.JsonRpcSigner | import("@nomicfoundation/hardhat-ethers/signers").HardhatEthersSigner>;
    setCodeAt(address: string, byteCode: string): Promise<void>;
    getCodeAt(address: string): Promise<string>;
    getBlockNumber(): Promise<number>;
    unsetTemporaryMinimumBlockGasLimit(): Promise<void>;
    setTemporaryMinimumBlockGasLimit(minBlockGasLimit: bigint): Promise<undefined>;
    setBlockGasLimit(blockGasLimit: bigint): Promise<void>;
    getBlockGasLimit(): Promise<bigint | undefined>;
}
//# sourceMappingURL=FhevmEthersProvider.d.ts.map