import { DecryptionOracle, FhevmContractName, MockCoprocessor, MockFhevmInstance } from "@fhevm/mock-utils";
import { ethers as EthersT } from "ethers";
import type { HardhatRuntimeEnvironment } from "hardhat/types";
import { HardhatFhevmRuntimeEnvironment } from "../types";
import { FHEVMConfig } from "../types";
import { FhevmDebugger } from "./FhevmDebugger";
import { FhevmEnvironmentPaths } from "./FhevmEnvironmentPaths";
import { FhevmEthersProvider } from "./utils/FhevmEthersProvider";
export type FhevmEnvironmentConfig = {
    ACLAddress: string;
    ACLReadOnly: EthersT.Contract;
    FHEVMExecutorAddress: string;
    FHEVMExecutorReadOnly: EthersT.Contract;
    InputVerifierAddress: string;
    InputVerifierReadOnly: EthersT.Contract;
    KMSVerifierAddress: string;
    KMSVerifierReadOnly: EthersT.Contract;
    DecryptionOracleAddress: string;
    DecryptionOracleReadOnly: EthersT.Contract;
    kmsSigners: EthersT.Signer[];
    coprocessorSigners: EthersT.Signer[];
    gatewayInputVerificationAddress: string;
    gatewayChainId: number;
    gatewayDecryptionAddress: string;
};
export type FhevmEnvironmentAddresses = {
    /**
     * Indicates the addresses stored in the solidity `FHEVMConfigStruct` used in the project.
     */
    FHEVMConfig: FHEVMConfig;
    /**
     * Indicates the addresse of the solidity contract `FHEGasLimit.sol` used in the project.
     */
    FHEGasLimitAddress: string;
    /**
     * Indicates the absolute path of the 'FHEVMConfig.sol' solidity file used in the project.
     */
    FHEVMConfigDotSolPath: string;
    /**
     * Indicates the address stored in the 'ZamaOracleAddress.sol' solidity file used in the project.
     */
    SepoliaZamaOracleAddress: string;
    /**
     * Indicates the absolute path of the 'ZamaOracleAddress.sol' solidity file used in the project.
     */
    ZamaOracleAddressDotSolPath: string;
};
export type FhevmSigners = {
    coprocessor: EthersT.Signer[];
    kms: EthersT.Signer[];
    zero: EthersT.Signer;
    zeroAddress: string;
    one: EthersT.Signer;
    oneAddress: string;
};
export type FhevmProviderInfo = {
    web3ClientVersion: string;
    url?: string;
    networkName: string;
    isNetworkHardhatNode: boolean;
    isAnvil: boolean;
    methods: {
        setCode?: string;
        impersonateAccount?: string;
        setBalance?: string;
    };
};
export type FhevmContractRecordEntry = {
    contractName: FhevmContractName;
    address: string;
    contract: EthersT.Contract;
    package: string;
};
export declare class FhevmEnvironment {
    private _runningInHHNode;
    private _runningInHHTest;
    private _runningInHHFHEVMInstallSolidity;
    private _fhevmEthersProvider;
    private _hre;
    private _config;
    private _addresses;
    private _instance;
    private _paths;
    private _relayerSigner;
    private _fhevmAPI;
    private _fhevmDebugger;
    private _mockDecryptionOracle;
    private _mockCoprocessor;
    private _relayerSignerAddress;
    private _deployRunning;
    private _deployCompleted;
    private _setupAddressesRunning;
    private _setupAddressesCompleted;
    private _addressToReadonlyContract;
    private _id;
    private static _idCount;
    /**
     * Constructor must be ultra-lightweight!
     */
    constructor(hre: HardhatRuntimeEnvironment);
    setRunningInHHFHEVMInstallSolidity(): void;
    unsetRunningInHHFHEVMInstallSolidity(): void;
    setRunningInHHTest(): void;
    setRunningInHHNode(): void;
    get isRunningInHHTest(): boolean;
    get isRunningInHHNode(): boolean;
    get isRunningInHHFHEVMInstallSolidity(): boolean;
    get hre(): HardhatRuntimeEnvironment;
    get paths(): FhevmEnvironmentPaths;
    get debugger(): FhevmDebugger;
    get coprocessor(): MockCoprocessor;
    get decryptionOracle(): DecryptionOracle;
    getInstanceOrUndefined(): MockFhevmInstance | undefined;
    get instance(): MockFhevmInstance;
    getACLAddress(): string;
    getFHEVMExecutorAddress(): string;
    getInputVerifierAddress(): string;
    getKMSVerifierAddress(): string;
    getDecryptionOracleAddress(): string;
    /**
     * Fhevm Gateway InputVerification.sol contract
     * Address of the contract deployed on the gateway chain
     * (identified by the chainId returned from getGatewayChainId())
     * responsible for performing EIP-712 signature verification
     * for input values
     * @returns InputVerification contract address
     */
    getGatewayInputVerificationAddress(): string;
    /**
     * Fhevm Gateway Decryption.sol contract
     * Address of the contract deployed on the gateway chain
     * (identified by the chainId returned from getGatewayChainId())
     * responsible for performing EIP-712 signature verification
     * for decryption operations
     * @returns Decryption contract address
     */
    getGatewayDecryptionAddress(): string;
    getACLReadOnly(): EthersT.Contract;
    getFHEVMExecutorReadOnly(): EthersT.Contract;
    getInputVerifierReadOnly(): EthersT.Contract;
    getDecryptionOracleReadOnly(): EthersT.Contract;
    getKMSSigners(): EthersT.Signer[];
    getKMSVerifierReadOnly(): EthersT.Contract;
    getCoprocessorSigners(): EthersT.Signer[];
    getRelayerSignerAddress(): string;
    /**
     * Called by the MockFhevmGatewayDecryptor
     */
    getRelayerSigner(): EthersT.Signer;
    getGatewayChainId(): number;
    get chainId(): number;
    /**
     *  API
     */
    get externalFhevmAPI(): HardhatFhevmRuntimeEnvironment;
    getFHEVMContractsMap(): Record<string, FhevmContractRecordEntry>;
    get isDeployed(): boolean;
    deploy(): Promise<void>;
    get ethersProvider(): FhevmEthersProvider;
    minimalInit(): Promise<void>;
    private _createSigners;
    get useEmbeddedMockEngine(): boolean;
    private _deployCore;
    createInstance(): Promise<MockFhevmInstance>;
    /**
     * Generates:
     *  - `/path/to/user-package/fhevmTemp/@fhevm/solidity/config/FHEVMConfig.sol`
     *  - `/path/to/user-package/fhevmTemp/@zama-fhe/oracle-solidity/address/ZamaOracleAddress.sol`
     */
    initializeAddresses(ignoreCache: boolean): Promise<FhevmEnvironmentAddresses>;
    private _initializeAddressesCore;
    getRemappings(): Record<string, string>;
    getSoliditySourcePaths(): string[];
    interfaceFromName(fhevmContractName: FhevmContractName): EthersT.Interface | undefined;
    addressFromName(fhevmContractName: FhevmContractName): string | undefined;
    readonlyContractFromAddress(address: string): FhevmContractRecordEntry | undefined;
}
//# sourceMappingURL=FhevmEnvironment.d.ts.map