"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("hardhat/config");
const error_1 = require("../error");
const EnvironmentExtender_1 = require("../internal/EnvironmentExtender");
const task_names_1 = require("../task-names");
const fhevmScope = (0, config_1.scope)(task_names_1.SCOPE_FHEVM, "Fhevm related commands");
fhevmScope
    .task(task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY)
    .setDescription("Install all the required fhevm solidity files associated with the selected network.")
    .addFlag("ignoreCache", "Force recompute addresses.")
    .setAction(async ({ ignoreCache, }, hre) => {
    if (hre.network.name !== "hardhat") {
        throw new error_1.HardhatFhevmError(`Please run 'npx hardhat ${task_names_1.SCOPE_FHEVM} ${task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY}' using the '--network hardhat' option. The current network is '${hre.network.name}'`);
    }
    const fhevmEnv = EnvironmentExtender_1.fhevmContext.get();
    if (fhevmEnv.isRunningInHHFHEVMInstallSolidity) {
        throw new error_1.HardhatFhevmError(`Command hardhat ${task_names_1.SCOPE_FHEVM} ${task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY} is already running`);
    }
    fhevmEnv.setRunningInHHFHEVMInstallSolidity();
    try {
        await fhevmEnv.minimalInit();
        await fhevmEnv.initializeAddresses(ignoreCache);
    }
    finally {
        try {
            fhevmEnv.unsetRunningInHHFHEVMInstallSolidity();
        }
        catch {
        }
    }
});
//# sourceMappingURL=fhevm.js.map