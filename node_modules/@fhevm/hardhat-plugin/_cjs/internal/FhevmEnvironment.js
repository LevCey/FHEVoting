"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FhevmEnvironment = void 0;
const mock_utils_1 = require("@fhevm/mock-utils");
const ethers_1 = require("ethers");
const path = __importStar(require("path"));
const constants_1 = __importDefault(require("../constants"));
const error_1 = require("../error");
const task_names_1 = require("../task-names");
const FhevmDebugger_1 = require("./FhevmDebugger");
const FhevmEnvironmentPaths_1 = require("./FhevmEnvironmentPaths");
const FhevmExternalAPI_1 = require("./FhevmExternalAPI");
const FHEVMConfig_1 = require("./deploy/FHEVMConfig");
const PrecompiledFhevmCoreContracts_1 = require("./deploy/PrecompiledFhevmCoreContracts");
const PrecompiledZamaFheOracleSolidity_1 = require("./deploy/PrecompiledZamaFheOracleSolidity");
const ZamaOracleAddress_1 = require("./deploy/ZamaOracleAddress");
const addresses_1 = require("./deploy/addresses");
const setup_1 = require("./deploy/setup");
const error_2 = require("./error");
const FhevmEthersProvider_1 = require("./utils/FhevmEthersProvider");
class FhevmEnvironment {
    constructor(hre) {
        Object.defineProperty(this, "_runningInHHNode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_runningInHHTest", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_runningInHHFHEVMInstallSolidity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fhevmEthersProvider", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_hre", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_config", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_addresses", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_instance", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_paths", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_relayerSigner", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fhevmAPI", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_fhevmDebugger", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_mockDecryptionOracle", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_mockCoprocessor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_relayerSignerAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_deployRunning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_deployCompleted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_setupAddressesRunning", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_setupAddressesCompleted", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        Object.defineProperty(this, "_addressToReadonlyContract", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "_id", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: -1
        });
        FhevmEnvironment._idCount++;
        this._id = FhevmEnvironment._idCount;
        this._hre = hre;
        this._fhevmAPI = new FhevmExternalAPI_1.FhevmExternalAPI(this);
        this._fhevmDebugger = new FhevmDebugger_1.FhevmDebugger(this);
        this._paths = new FhevmEnvironmentPaths_1.FhevmEnvironmentPaths(hre.config.paths.root);
    }
    setRunningInHHFHEVMInstallSolidity() {
        if (this._runningInHHFHEVMInstallSolidity !== undefined) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is already running inside a 'hardhat ${task_names_1.SCOPE_FHEVM} ${task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY}' command.`);
        }
        this._runningInHHFHEVMInstallSolidity = true;
    }
    unsetRunningInHHFHEVMInstallSolidity() {
        if (this._runningInHHFHEVMInstallSolidity !== true) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is not running inside a 'hardhat ${task_names_1.SCOPE_FHEVM} ${task_names_1.SCOPE_FHEVM_TASK_INSTALL_SOLIDITY}' command.`);
        }
        this._runningInHHFHEVMInstallSolidity = undefined;
    }
    setRunningInHHTest() {
        if (this._runningInHHTest !== undefined) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is already running inside a hardhat test command.`);
        }
        if (this._runningInHHNode !== undefined) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is already running inside a hardhat node command.`);
        }
        this._runningInHHTest = true;
    }
    setRunningInHHNode() {
        if (this._runningInHHTest !== undefined) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is already running inside a hardhat test command.`);
        }
        if (this._runningInHHNode !== undefined) {
            throw new error_1.HardhatFhevmError(`The fhevm hardhat plugin is already running inside a hardhat node command.`);
        }
        this._runningInHHNode = true;
    }
    get isRunningInHHTest() {
        return this._runningInHHTest === true;
    }
    get isRunningInHHNode() {
        return this._runningInHHNode === true;
    }
    get isRunningInHHFHEVMInstallSolidity() {
        return this._runningInHHFHEVMInstallSolidity === true;
    }
    get hre() {
        if (!this._hre) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._hre;
    }
    get paths() {
        return this._paths;
    }
    get debugger() {
        if (!this._fhevmDebugger) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._fhevmDebugger;
    }
    get coprocessor() {
        if (!this._mockCoprocessor) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._mockCoprocessor;
    }
    get decryptionOracle() {
        if (!this._mockDecryptionOracle) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._mockDecryptionOracle;
    }
    getInstanceOrUndefined() {
        return this._instance;
    }
    get instance() {
        if (!this._instance) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._instance;
    }
    getACLAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.ACLAddress;
    }
    getFHEVMExecutorAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.FHEVMExecutorAddress;
    }
    getInputVerifierAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.InputVerifierAddress;
    }
    getKMSVerifierAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.KMSVerifierAddress;
    }
    getDecryptionOracleAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.DecryptionOracleAddress;
    }
    getGatewayInputVerificationAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.gatewayInputVerificationAddress;
    }
    getGatewayDecryptionAddress() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.gatewayDecryptionAddress;
    }
    getACLReadOnly() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.ACLReadOnly;
    }
    getFHEVMExecutorReadOnly() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.FHEVMExecutorReadOnly;
    }
    getInputVerifierReadOnly() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.InputVerifierReadOnly;
    }
    getDecryptionOracleReadOnly() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.DecryptionOracleReadOnly;
    }
    getKMSSigners() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.kmsSigners;
    }
    getKMSVerifierReadOnly() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.KMSVerifierReadOnly;
    }
    getCoprocessorSigners() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.coprocessorSigners;
    }
    getRelayerSignerAddress() {
        if (!this._relayerSignerAddress) {
            throw new error_1.HardhatFhevmError(`Relayer signer address is not defined. Ensure that the Fhevm environment has been properly initialized by calling runSetup() (${this._id}/${FhevmEnvironment._idCount})`);
        }
        return this._relayerSignerAddress;
    }
    getRelayerSigner() {
        if (!this._relayerSigner) {
            throw new error_1.HardhatFhevmError("Relayer signer is not defined. Ensure that the Fhevm environment has been properly initialized by calling runSetup()");
        }
        return this._relayerSigner;
    }
    getGatewayChainId() {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._config.gatewayChainId;
    }
    get chainId() {
        if (!this._fhevmEthersProvider) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._fhevmEthersProvider.chainId;
    }
    get externalFhevmAPI() {
        return this._fhevmAPI;
    }
    getFHEVMContractsMap() {
        if (!this._addressToReadonlyContract) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._addressToReadonlyContract;
    }
    get isDeployed() {
        return this._deployCompleted;
    }
    async deploy() {
        if (this._deployCompleted) {
            throw new error_1.HardhatFhevmError("The Fhevm environment is already initialized.");
        }
        if (this._deployRunning) {
            throw new error_1.HardhatFhevmError("The Fhevm environment is already being initialized.");
        }
        this._deployRunning = true;
        await this._deployCore();
        this._deployCompleted = true;
        this._deployRunning = false;
    }
    get ethersProvider() {
        if (!this._fhevmEthersProvider) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        return this._fhevmEthersProvider;
    }
    async minimalInit() {
        if (this._fhevmEthersProvider === undefined) {
            this._fhevmEthersProvider = await FhevmEthersProvider_1.FhevmEthersProvider.create(this.hre);
        }
    }
    async _createSigners() {
        const kmsSigners = await (0, addresses_1.getKMSSigners)(this.hre, this.ethersProvider.provider);
        const coprocessorSigners = await (0, addresses_1.getCoprocessorSigners)(this.hre, this.ethersProvider.provider);
        const oneAddress = "0x0000000000000000000000000000000000000001";
        const balance = ethers_1.ethers.parseEther("10000");
        return {
            coprocessor: coprocessorSigners,
            kms: kmsSigners,
            oneAddress,
            zeroAddress: ethers_1.ethers.ZeroAddress,
            zero: await this.ethersProvider.impersonateAddressAndSetBalance(this.hre, ethers_1.ethers.ZeroAddress, balance),
            one: await this.ethersProvider.impersonateAddressAndSetBalance(this.hre, oneAddress, balance),
        };
    }
    get useEmbeddedMockEngine() {
        return this.ethersProvider.info.type !== FhevmEthersProvider_1.FhevmEthersProviderType.HardhatNode;
    }
    async _deployCore() {
        await this.minimalInit();
        this._relayerSignerAddress = await (0, addresses_1.getRelayerSignerAddress)(this.hre);
        this._relayerSigner = await (0, addresses_1.getRelayerSigner)(this.hre);
        const fhevmAddresses = await this.initializeAddresses(false);
        const fhevmSigners = await this._createSigners();
        await this.ethersProvider.setTemporaryMinimumBlockGasLimit(0x1fffffffffffffn);
        try {
            this._config = await (0, setup_1.setupMockUsingCoreContractsArtifacts)(this.ethersProvider, fhevmAddresses, fhevmSigners, this.paths);
            this._addressToReadonlyContract = {};
            this._addressToReadonlyContract[this._config.ACLAddress.toLowerCase()] = {
                contractName: "ACL",
                address: this._config.ACLAddress,
                contract: this._config.ACLReadOnly,
                package: constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE_NAME,
            };
            this._addressToReadonlyContract[this._config.FHEVMExecutorAddress.toLowerCase()] = {
                contractName: "FHEVMExecutor",
                address: this._config.FHEVMExecutorAddress,
                contract: this._config.FHEVMExecutorReadOnly,
                package: constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE_NAME,
            };
            this._addressToReadonlyContract[this._config.DecryptionOracleAddress.toLowerCase()] = {
                contractName: "DecryptionOracle",
                address: this._config.DecryptionOracleAddress,
                contract: this._config.DecryptionOracleReadOnly,
                package: constants_1.default.ZAMA_FHE_ORACLE_SOLIDITY_PACKAGE_NAME,
            };
            this._addressToReadonlyContract[this._config.InputVerifierAddress.toLowerCase()] = {
                contractName: "InputVerifier",
                address: this._config.InputVerifierAddress,
                contract: this._config.InputVerifierReadOnly,
                package: constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE_NAME,
            };
            this._addressToReadonlyContract[this._config.KMSVerifierAddress.toLowerCase()] = {
                contractName: "KMSVerifier",
                address: this._config.KMSVerifierAddress,
                contract: this._config.KMSVerifierReadOnly,
                package: constants_1.default.FHEVM_CORE_CONTRACTS_PACKAGE_NAME,
            };
        }
        finally {
            await this.ethersProvider.unsetTemporaryMinimumBlockGasLimit();
        }
        if (this.useEmbeddedMockEngine) {
            const blockNumber = await this.hre.ethers.provider.getBlockNumber();
            const db = new mock_utils_1.FhevmDBMap();
            await db.init(blockNumber);
            const inputVerifier = await mock_utils_1.contracts.InputVerifier.create(this.hre.ethers.provider, this.getInputVerifierAddress());
            const kmsVerifier = await mock_utils_1.contracts.KMSVerifier.create(this.hre.ethers.provider, this.getKMSVerifierAddress());
            const acl = await mock_utils_1.contracts.ACL.create(this.hre.ethers.provider, this.getACLAddress());
            this._mockCoprocessor = new mock_utils_1.MockCoprocessor(this.interfaceFromName("FHEVMExecutor"), this.getFHEVMExecutorAddress(), this.ethersProvider.provider, db, inputVerifier, this.getCoprocessorSigners());
            this._mockDecryptionOracle = new mock_utils_1.MockDecryptionOracle(this.interfaceFromName("DecryptionOracle"), this.getDecryptionOracleAddress(), this.ethersProvider.provider, this._mockCoprocessor, db, kmsVerifier, acl, this.getKMSSigners(), this.getRelayerSigner());
        }
        if (this.ethersProvider.isMock) {
            this._instance = await this.createInstance();
        }
        else {
            throw new error_1.HardhatFhevmError("The current version of the fhevm hardhat plugin only supports the 'hardhat' network or 'localhost' hardhat node.");
        }
    }
    async createInstance() {
        return mock_utils_1.MockFhevmInstance.create(this.hre.ethers.provider, this.hre.ethers.provider, {
            verifyingContractAddressDecryption: this.getGatewayDecryptionAddress(),
            verifyingContractAddressInputVerification: this.getGatewayInputVerificationAddress(),
            kmsContractAddress: this.getKMSVerifierAddress(),
            inputVerifierContractAddress: this.getInputVerifierAddress(),
            aclContractAddress: this.getACLAddress(),
            chainId: this.chainId,
            gatewayChainId: this.getGatewayChainId(),
        });
    }
    async initializeAddresses(ignoreCache) {
        if (this._addresses !== undefined) {
            return this._addresses;
        }
        if (this._setupAddressesCompleted) {
            throw new error_1.HardhatFhevmError("The Fhevm environment addresses are already initialized.");
        }
        if (this._setupAddressesRunning) {
            throw new error_1.HardhatFhevmError("The Fhevm environment addresses are already being initialized.");
        }
        this._setupAddressesRunning = true;
        const addresses = await this._initializeAddressesCore(ignoreCache);
        Object.freeze(addresses);
        Object.freeze(addresses.FHEVMConfig);
        this._addresses = addresses;
        this._setupAddressesCompleted = true;
        this._setupAddressesRunning = false;
        return addresses;
    }
    async _initializeAddressesCore(ignoreCache) {
        const precompiledAddresses = await (0, PrecompiledFhevmCoreContracts_1.loadPrecompiledFhevmCoreContractsAddresses)(this.ethersProvider, this.paths, ignoreCache, this.isRunningInHHFHEVMInstallSolidity);
        const kmsVerifierAddress = (0, addresses_1.getKMSVerifierAddress)();
        const fhevmConfig = {
            ACLAddress: precompiledAddresses.ACLAddress,
            FHEVMExecutorAddress: precompiledAddresses.FHEVMExecutorAddress,
            InputVerifierAddress: precompiledAddresses.InputVerifierAddress,
            KMSVerifierAddress: kmsVerifierAddress,
        };
        const fhevmConfigDotSolPath = (0, FHEVMConfig_1.generateFHEVMConfigDotSol)(this.paths, fhevmConfig);
        const zamaOracleAddress = (0, PrecompiledZamaFheOracleSolidity_1.parseSepoliaZamaOracleAddress)(this.paths);
        const zamaOracleAddressDotSolPath = (0, ZamaOracleAddress_1.generateZamaOracleAddressDotSol)(this.paths, zamaOracleAddress.SepoliaZamaOracleAddress);
        (0, error_2.assertHHFhevm)(path.isAbsolute(fhevmConfigDotSolPath));
        (0, error_2.assertHHFhevm)(path.isAbsolute(zamaOracleAddressDotSolPath));
        return {
            ...zamaOracleAddress,
            FHEVMConfig: fhevmConfig,
            FHEGasLimitAddress: precompiledAddresses.FHEGasLimitAddress,
            FHEVMConfigDotSolPath: fhevmConfigDotSolPath,
            ZamaOracleAddressDotSolPath: zamaOracleAddressDotSolPath,
        };
    }
    getRemappings() {
        if (!this.ethersProvider.isMock) {
            return {};
        }
        return {
            "@fhevm/solidity/config": this.paths.relCacheFhevmSolidityConfig,
            "@zama-fhe/oracle-solidity/address": this.paths.relCacheZamaFheOracleSolidityAddress,
        };
    }
    getSoliditySourcePaths() {
        return [];
    }
    interfaceFromName(fhevmContractName) {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        switch (fhevmContractName) {
            case "ACL":
                return this._config.ACLReadOnly.interface;
            case "FHEVMExecutor":
                return this._config.FHEVMExecutorReadOnly.interface;
            case "InputVerifier":
                return this._config.InputVerifierReadOnly.interface;
            case "KMSVerifier":
                return this._config.KMSVerifierReadOnly.interface;
            case "DecryptionOracle":
                return this._config.DecryptionOracleReadOnly.interface;
        }
        return undefined;
    }
    addressFromName(fhevmContractName) {
        if (!this._config) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        switch (fhevmContractName) {
            case "ACL":
                return this._config.ACLAddress;
            case "FHEVMExecutor":
                return this._config.FHEVMExecutorAddress;
            case "InputVerifier":
                return this._config.InputVerifierAddress;
            case "KMSVerifier":
                return this._config.KMSVerifierAddress;
            case "DecryptionOracle":
                return this._config.DecryptionOracleAddress;
        }
        return undefined;
    }
    readonlyContractFromAddress(address) {
        if (!this._addressToReadonlyContract) {
            throw new error_1.HardhatFhevmError(`The Hardhat Fhevm plugin is not initialized.`);
        }
        const addressLC = address.toLowerCase();
        if (addressLC in this._addressToReadonlyContract) {
            return this._addressToReadonlyContract[addressLC];
        }
        return undefined;
    }
}
exports.FhevmEnvironment = FhevmEnvironment;
Object.defineProperty(FhevmEnvironment, "_idCount", {
    enumerable: true,
    configurable: true,
    writable: true,
    value: -1
});
//# sourceMappingURL=FhevmEnvironment.js.map