import { type MinimalProvider } from "../../ethers/provider.js";
import { type MockRelayerV1InputProofPayload } from "./mock_payloads.js";
import type { RelayerMetadata, RelayerV1InputProofResponse, RelayerV1PublicDecryptPayload, RelayerV1UserDecryptPayload } from "./payloads.js";
/**
 * Equivalent to const response = await fetch(`${relayerUrl}/v1/input-proof`, options);
 */
export declare function requestRelayerV1InputProof(provider: MinimalProvider, payload: MockRelayerV1InputProofPayload): Promise<RelayerV1InputProofResponse>;
/**
 * Equivalent to const response = await fetch(`${relayerUrl}/v1/user-decrypt`, options);
 */
export declare function requestRelayerV1UserDecrypt(provider: MinimalProvider, payload: RelayerV1UserDecryptPayload): Promise<string[]>;
/**
 * Equivalent to const response = await fetch(`${relayerUrl}/v1/public-decrypt`, options);
 */
export declare function requestRelayerV1PublicDecrypt(provider: MinimalProvider, payload: RelayerV1PublicDecryptPayload): Promise<string>;
/**
 * Custom, returns Fhevm addresses expected by the relayer.
 */
export declare function requestRelayerMetadata(provider: MinimalProvider): Promise<RelayerMetadata>;
export declare function requestFhevmAwaitDecryptionOracle(provider: MinimalProvider): Promise<any>;
export declare function requestFhevmGetClearText(provider: MinimalProvider, payload: string[]): Promise<any>;
//# sourceMappingURL=MockRelayer.d.ts.map