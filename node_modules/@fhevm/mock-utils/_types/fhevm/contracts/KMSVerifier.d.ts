import { ethers as EthersT } from "ethers";
import type { EIP712Domain, EthersEIP712 } from "../../ethers/eip712.js";
export declare class KMSVerifier {
    #private;
    constructor(runner: EthersT.ContractRunner, kmsVerifierContractAddress: string);
    get runner(): EthersT.ContractRunner;
    static create(runner: EthersT.ContractRunner, kmsVerifierContractAddress: string): Promise<KMSVerifier>;
    initialize(): Promise<void>;
    get address(): string;
    get gatewayChainId(): bigint;
    get gatewayDecryptionAddress(): string;
    get eip712Domain(): EIP712Domain;
    getKmsSignersAddresses(): string[];
    getThreshold(): number;
    createPublicDecryptVerificationEIP712(handlesBytes32List: EthersT.BigNumberish[], decryptedResult: string): EthersEIP712;
}
export declare function computeDecryptionSignatures(handlesBytes32Hex: string[], clearTextValues: (string | bigint | boolean)[], abiCoder: EthersT.AbiCoder, kmsVerifier: KMSVerifier, kmsSigners: EthersT.Signer[]): Promise<{
    signatures: string[];
    types: ReadonlyArray<string | EthersT.ParamType>;
    values: ReadonlyArray<any>;
}>;
export declare function computeDecryptionCallbackSignaturesAndCalldata(handlesBytes32Hex: string[], clearTextValuesString: string[], requestID: bigint, callbackSelectorBytes4Hex: string, abiCoder: EthersT.AbiCoder, kmsVerifier: KMSVerifier, kmsSigners: EthersT.Signer[]): Promise<{
    calldata: string;
    signatures: string[];
}>;
//# sourceMappingURL=KMSVerifier.d.ts.map