import { ethers as EthersT } from "ethers";
import type { EIP712Domain, EthersEIP712 } from "../../ethers/eip712.js";
export declare class InputVerifier {
    #private;
    constructor(runner: EthersT.ContractRunner, inputVerifierContractAddress: string);
    get runner(): EthersT.ContractRunner;
    static create(runner: EthersT.ContractRunner, inputVerifierContractAddress: string): Promise<InputVerifier>;
    initialize(): Promise<void>;
    get address(): string;
    get gatewayChainId(): bigint;
    get gatewayInputVerificationAddress(): string;
    get eip712Domain(): EIP712Domain;
    getCoprocessorSigners(): string[];
    getThreshold(): number;
    verifySignatures(handlesBytes32List: EthersT.BytesLike[], userAddress: string, contractAddress: string, contractChainId: number, signatures: string[]): void;
    createCiphertextVerificationEIP712(handlesBytes32List: EthersT.BigNumberish[], contractChainId: number, contractAddress: string, userAddress: string): EthersEIP712;
}
export declare function computeInputProofHex(handlesBytes32Hex: string[], coprocessorsSignaturesHex: string[]): string;
//# sourceMappingURL=InputVerifier.d.ts.map