import { ethers as EthersT } from "ethers";
import { ACL } from "../contracts/ACL.js";
import { KMSVerifier } from "../contracts/KMSVerifier.js";
import type { Coprocessor } from "../coprocessor/Coprocessor.js";
import type { FhevmDB } from "../db/FhevmDB.js";
import type { DecryptionOracle } from "./DecryptionOracle.js";
export declare class MockDecryptionOracle implements DecryptionOracle {
    #private;
    constructor(decryptionOracleContractInterface: EthersT.Interface, decryptionOracleContractAddress: string, readonlyProvider: EthersT.Provider, coprocessor: Coprocessor, db: FhevmDB, kmsVerifier: KMSVerifier, acl: ACL, kmsSigners: EthersT.Signer[], relayerSigner: EthersT.Signer);
    createDecryptionSignatures(handlesBytes32Hex: string[], clearTextValues: (bigint | string | boolean)[]): Promise<string[]>;
    awaitDecryptionOracle(): Promise<void>;
}
//# sourceMappingURL=MockDecryptionOracle.d.ts.map