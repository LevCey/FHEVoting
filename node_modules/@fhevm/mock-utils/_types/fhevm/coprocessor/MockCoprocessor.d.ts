import { ethers as EthersT } from "ethers";
import { InputVerifier } from "../contracts/InputVerifier.js";
import type { FhevmDB, FhevmDBHandleMetadata } from "../db/FhevmDB.js";
import type { Coprocessor } from "./Coprocessor.js";
export declare class MockCoprocessor implements Coprocessor {
    #private;
    constructor(coprocessorContractInterface: EthersT.Interface, coprocessorContractAddress: string, readonlyProvider: EthersT.Provider, db: FhevmDB, inputVerifier: InputVerifier, coprocessorSigners: EthersT.Signer[]);
    awaitCoprocessor(): Promise<void>;
    clearHandleDB(): Promise<void>;
    handleEvmRevert(newBlockNumber: number): Promise<void>;
    insertHandleBytes32(handleBytes32Hex: string, clearTextHex: string, metadata: FhevmDBHandleMetadata): Promise<void>;
    queryHandlesBytes32AsHex(handlesBytes32: string[]): Promise<string[]>;
    computeCoprocessorSignatures(handlesBytes32List: Uint8Array[], contractChainId: number, contractAddress: string, userAddress: string): Promise<{
        handles: string[];
        signatures: string[];
    }>;
}
//# sourceMappingURL=MockCoprocessor.d.ts.map