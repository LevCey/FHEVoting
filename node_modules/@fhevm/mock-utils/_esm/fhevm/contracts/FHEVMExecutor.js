var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FHEVMExecutor_fhevmExecutorContract, _FHEVMExecutor_fhevmExecutorContractAddress, _FHEVMExecutor_aclAddress, _FHEVMExecutor_fheGasLimitAddress, _FHEVMExecutor_inputVerifierAddress, _FHEVMExecutor_version;
import { ethers as EthersT } from "ethers";
import { assertIsAddress } from "../../utils/address.js";
import { assertFhevm } from "../../utils/error.js";
import { assertIsString } from "../../utils/string.js";
const abiFHEVMExecutor = [
    "function getVersion() external pure virtual returns (string memory)",
    "function getInputVerifierAddress() public view virtual returns (address)",
    "function getFHEGasLimitAddress() public view virtual returns (address)",
    "function getACLAddress() public view virtual returns (address)",
];
export class FHEVMExecutor {
    constructor(runner, fhevmExecutorContractAddress) {
        _FHEVMExecutor_fhevmExecutorContract.set(this, void 0);
        _FHEVMExecutor_fhevmExecutorContractAddress.set(this, void 0);
        _FHEVMExecutor_aclAddress.set(this, void 0);
        _FHEVMExecutor_fheGasLimitAddress.set(this, void 0);
        _FHEVMExecutor_inputVerifierAddress.set(this, void 0);
        _FHEVMExecutor_version.set(this, void 0);
        assertIsAddress(fhevmExecutorContractAddress, "fhevmExecutorContractAddress");
        __classPrivateFieldSet(this, _FHEVMExecutor_fhevmExecutorContractAddress, fhevmExecutorContractAddress, "f");
        __classPrivateFieldSet(this, _FHEVMExecutor_fhevmExecutorContract, new EthersT.Contract(fhevmExecutorContractAddress, abiFHEVMExecutor, runner), "f");
    }
    get address() {
        return __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContractAddress, "f");
    }
    get runner() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").runner);
        return __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").runner;
    }
    get version() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_version, "f") !== undefined, `FHEVMExecutor wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _FHEVMExecutor_version, "f");
    }
    get aclAddress() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_aclAddress, "f") !== undefined, `FHEVMExecutor wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _FHEVMExecutor_aclAddress, "f");
    }
    get fheGasLimitAddress() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_fheGasLimitAddress, "f") !== undefined, `FHEVMExecutor wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _FHEVMExecutor_fheGasLimitAddress, "f");
    }
    get inputVerifierAddress() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_inputVerifierAddress, "f") !== undefined, `FHEVMExecutor wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _FHEVMExecutor_inputVerifierAddress, "f");
    }
    static async create(runner, fhevmExecutorContractAddress) {
        const fhevmExecutor = new FHEVMExecutor(runner, fhevmExecutorContractAddress);
        await fhevmExecutor.initialize();
        return fhevmExecutor;
    }
    async initialize() {
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_aclAddress, "f") === undefined, `FHEVMExecutor wrapper already initialized`);
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_fheGasLimitAddress, "f") === undefined, `FHEVMExecutor wrapper already initialized`);
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_inputVerifierAddress, "f") === undefined, `FHEVMExecutor wrapper already initialized`);
        assertFhevm(__classPrivateFieldGet(this, _FHEVMExecutor_version, "f") === undefined, `FHEVMExecutor wrapper already initialized`);
        __classPrivateFieldSet(this, _FHEVMExecutor_aclAddress, await __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").getACLAddress(), "f");
        assertIsAddress(__classPrivateFieldGet(this, _FHEVMExecutor_aclAddress, "f"), "aclAddress");
        __classPrivateFieldSet(this, _FHEVMExecutor_fheGasLimitAddress, await __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").getFHEGasLimitAddress(), "f");
        assertIsAddress(__classPrivateFieldGet(this, _FHEVMExecutor_fheGasLimitAddress, "f"), "fheGasLimitAddress");
        __classPrivateFieldSet(this, _FHEVMExecutor_inputVerifierAddress, await __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").getInputVerifierAddress(), "f");
        assertIsAddress(__classPrivateFieldGet(this, _FHEVMExecutor_inputVerifierAddress, "f"), "inputVerifierAddress");
        __classPrivateFieldSet(this, _FHEVMExecutor_version, await __classPrivateFieldGet(this, _FHEVMExecutor_fhevmExecutorContract, "f").getVersion(), "f");
        assertIsString(__classPrivateFieldGet(this, _FHEVMExecutor_version, "f"), "version");
    }
}
_FHEVMExecutor_fhevmExecutorContract = new WeakMap(), _FHEVMExecutor_fhevmExecutorContractAddress = new WeakMap(), _FHEVMExecutor_aclAddress = new WeakMap(), _FHEVMExecutor_fheGasLimitAddress = new WeakMap(), _FHEVMExecutor_inputVerifierAddress = new WeakMap(), _FHEVMExecutor_version = new WeakMap();
//# sourceMappingURL=FHEVMExecutor.js.map