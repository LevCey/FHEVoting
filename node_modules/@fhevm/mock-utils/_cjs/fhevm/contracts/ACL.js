"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ACL_aclReadOnlyContract, _ACL_aclContractAddress, _ACL_fhevmExecutorAddress, _ACL_version;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ACL = void 0;
const ethers_1 = require("ethers");
const address_js_1 = require("../../utils/address.js");
const error_js_1 = require("../../utils/error.js");
const string_js_1 = require("../../utils/string.js");
const abiACL = [
    "function getVersion() pure returns (string memory)",
    "function getFHEVMExecutorAddress() view returns (address)",
    "function isAllowedForDecryption(bytes32 handle) view returns (bool)",
];
class ACL {
    constructor(runner, aclContractAddress) {
        _ACL_aclReadOnlyContract.set(this, void 0);
        _ACL_aclContractAddress.set(this, void 0);
        _ACL_fhevmExecutorAddress.set(this, void 0);
        _ACL_version.set(this, void 0);
        (0, address_js_1.assertIsAddress)(aclContractAddress, "aclContractAddress");
        __classPrivateFieldSet(this, _ACL_aclContractAddress, aclContractAddress, "f");
        __classPrivateFieldSet(this, _ACL_aclReadOnlyContract, new ethers_1.ethers.Contract(aclContractAddress, abiACL, runner), "f");
    }
    get runner() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").runner);
        return __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").runner;
    }
    get address() {
        return __classPrivateFieldGet(this, _ACL_aclContractAddress, "f");
    }
    get version() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _ACL_version, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_version, "f");
    }
    get fhevmExecutorAddress() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f") !== undefined, `ACL wrapper is not yet initialized`);
        return __classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f");
    }
    static async create(runner, aclContractAddress) {
        const acl = new ACL(runner, aclContractAddress);
        await acl.initialize();
        return acl;
    }
    async initialize() {
        (0, error_js_1.assertFhevm)(__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f") === undefined, `ACL wrapper already initialized`);
        __classPrivateFieldSet(this, _ACL_fhevmExecutorAddress, await __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").getFHEVMExecutorAddress(), "f");
        (0, address_js_1.assertIsAddress)(__classPrivateFieldGet(this, _ACL_fhevmExecutorAddress, "f"), "fhemExecutorAddress");
        __classPrivateFieldSet(this, _ACL_version, await __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").getVersion(), "f");
        (0, string_js_1.assertIsString)(__classPrivateFieldGet(this, _ACL_version, "f"), "version");
    }
    async checkIsAllowedForDecryption(handlesBytes32Hex, readonlyProvider) {
        const c = __classPrivateFieldGet(this, _ACL_aclReadOnlyContract, "f").connect(readonlyProvider);
        const isAllowedForDec = await Promise.all(handlesBytes32Hex.map(async (handleBytes32Hex) => c.isAllowedForDecryption(handleBytes32Hex)));
        for (let i = 0; i < isAllowedForDec.length; ++i) {
            if (!isAllowedForDec[i]) {
                throw new error_js_1.FhevmError(`Handle ${handlesBytes32Hex[i]} is not authorized for decryption`);
            }
        }
    }
}
exports.ACL = ACL;
_ACL_aclReadOnlyContract = new WeakMap(), _ACL_aclContractAddress = new WeakMap(), _ACL_fhevmExecutorAddress = new WeakMap(), _ACL_version = new WeakMap();
//# sourceMappingURL=ACL.js.map