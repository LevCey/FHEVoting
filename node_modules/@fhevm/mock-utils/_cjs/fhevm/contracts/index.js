"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KMSVerifier = exports.InputVerifier = exports.FHEVMExecutor = exports.FHEGasLimit = exports.ACL = void 0;
exports.initFhevmContractsInfo = initFhevmContractsInfo;
const ethers_1 = require("ethers");
const error_js_1 = require("../../utils/error.js");
const ACL_js_1 = require("./ACL.js");
Object.defineProperty(exports, "ACL", { enumerable: true, get: function () { return ACL_js_1.ACL; } });
const FHEGasLimit_js_1 = require("./FHEGasLimit.js");
Object.defineProperty(exports, "FHEGasLimit", { enumerable: true, get: function () { return FHEGasLimit_js_1.FHEGasLimit; } });
const FHEVMExecutor_js_1 = require("./FHEVMExecutor.js");
Object.defineProperty(exports, "FHEVMExecutor", { enumerable: true, get: function () { return FHEVMExecutor_js_1.FHEVMExecutor; } });
const InputVerifier_js_1 = require("./InputVerifier.js");
Object.defineProperty(exports, "InputVerifier", { enumerable: true, get: function () { return InputVerifier_js_1.InputVerifier; } });
const KMSVerifier_js_1 = require("./KMSVerifier.js");
Object.defineProperty(exports, "KMSVerifier", { enumerable: true, get: function () { return KMSVerifier_js_1.KMSVerifier; } });
async function initFhevmContractsInfo(runner, aclContractAddress, kmsVerifierContractAddress) {
    if (!ethers_1.ethers.isAddress(aclContractAddress)) {
        throw new error_js_1.FhevmError(`Invalid ACL contract address ${aclContractAddress}`);
    }
    if (!ethers_1.ethers.isAddress(kmsVerifierContractAddress)) {
        throw new error_js_1.FhevmError(`Invalid KMSVerifier contract address ${kmsVerifierContractAddress}`);
    }
    const acl = await ACL_js_1.ACL.create(runner, aclContractAddress);
    const fhevmExecutor = await FHEVMExecutor_js_1.FHEVMExecutor.create(runner, acl.fhevmExecutorAddress);
    const inputVerifier = await InputVerifier_js_1.InputVerifier.create(runner, fhevmExecutor.inputVerifierAddress);
    const kmsVerifier = await KMSVerifier_js_1.KMSVerifier.create(runner, kmsVerifierContractAddress);
    const fheGasLimit = await FHEGasLimit_js_1.FHEGasLimit.create(runner, fhevmExecutor.fheGasLimitAddress);
    return {
        kmsVerifier,
        acl,
        fhevmExecutor,
        inputVerifier,
        fheGasLimit,
    };
}
//# sourceMappingURL=index.js.map