"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FhevmError = void 0;
exports.assertFhevm = assertFhevm;
exports.assertFhevmFailed = assertFhevmFailed;
exports.assertIsArray = assertIsArray;
exports.assertIsArrayProperty = assertIsArrayProperty;
exports.assertUint8ArrayDeepEqual = assertUint8ArrayDeepEqual;
exports.assertArrayOfUint8ArrayDeepEqual = assertArrayOfUint8ArrayDeepEqual;
exports.assertIsObjectProperty = assertIsObjectProperty;
function assertFhevm(check, message) {
    if (!check) {
        const title = "Fhevm assertion failed";
        message = message ? title + ": " + message : title;
        throw new FhevmError(message);
    }
}
function assertFhevmFailed(message) {
    const title = "Fhevm assertion failed";
    message = message ? title + ": " + message : title;
    throw new FhevmError(message);
}
function assertIsArray(value, valueName) {
    assertFhevm(Array.isArray(value), `${valueName ?? "value"} is not an array`);
}
function assertIsArrayProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (prop === undefined || prop === null) {
            throw new FhevmError(`Invalid ${typeName}. Missing '${key}' property.`);
        }
        if (!Array.isArray(prop)) {
            throw new FhevmError(`Expected '${key}' in ${typeName} to be an array.`);
        }
    }
}
function assertUint8ArrayDeepEqual(a1, a2) {
    assertFhevm(a1.length === a2.length, "Arrays do not have the same length");
    for (let i = 0; i < a1.length; ++i) {
        assertFhevm(a1[i] === a2[i], `Arrays are different. a1[${i}]=${a1[i]} !== a2[${i}]=${a2[i]}`);
    }
}
function assertArrayOfUint8ArrayDeepEqual(a1, a2) {
    assertFhevm(a1.length === a2.length, "Arrays do not have the same length");
    for (let i = 0; i < a1.length; ++i) {
        assertUint8ArrayDeepEqual(a1[i], a2[i]);
    }
}
function assertIsObjectProperty(value, propertyNames, typeName) {
    if (typeof value !== "object" || value === null) {
        throw new FhevmError(`${typeName} must be a non-null object.`);
    }
    for (const key of propertyNames) {
        const prop = value[key];
        if (prop === undefined || prop === null) {
            throw new FhevmError(`Invalid ${typeName}. Missing '${key}' property.`);
        }
        if (typeof prop !== "object") {
            throw new FhevmError(`Expected '${key}' in ${typeName} to be an object. Got ${typeof prop} instead.`);
        }
    }
}
class FhevmError extends Error {
}
exports.FhevmError = FhevmError;
//# sourceMappingURL=error.js.map